#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.6.2
# from Racc grammar file "".
#

require 'racc/parser.rb'



module GraphQL
  module Language
    class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 453)

EMPTY_ARRAY = [].freeze

def initialize(query_string, filename:, trace: Tracing::NullTrace)
  raise GraphQL::ParseError.new("No query string was present", nil, nil, query_string) if query_string.nil?
  @query_string = query_string
  @filename = filename
  @trace = trace
  @reused_next_token = [nil, nil]
end

def parse_document
  @document ||= begin
    # Break the string into tokens
    @trace.lex(query_string: @query_string) do
      @tokens ||= GraphQL::Language::Lexer.tokenize(@query_string)
    end
    # From the tokens, build an AST
    @trace.parse(query_string: @query_string) do
      if @tokens.empty?
        raise GraphQL::ParseError.new("Unexpected end of document", nil, nil, @query_string)
      else
        do_parse
      end
    end
  end
end

class << self
  attr_accessor :cache

  def parse(query_string, filename: nil, trace: GraphQL::Tracing::NullTrace)
    new(query_string, filename: filename, trace: trace).parse_document
  end

  def parse_file(filename, trace: GraphQL::Tracing::NullTrace)
    if cache
      cache.fetch(filename) do
        parse(File.read(filename), filename: filename, trace: trace)
      end
    else
      parse(File.read(filename), filename: filename, trace: trace)
    end
  end
end

private

def next_token
  lexer_token = @tokens.shift
  if lexer_token.nil?
    nil
  else
    @reused_next_token[0] = lexer_token[0]
    @reused_next_token[1] = lexer_token
    @reused_next_token
  end
end

def get_description(token)
  comments = []

  loop do
    prev_token = token
    token = token[4]

    break if token.nil?
    break if token[0] != :COMMENT
    break if prev_token[1] != token[1] + 1

    comments.unshift(token[3].sub(/^#\s*/, ""))
  end

  return nil if comments.empty?

  comments.join("\n")
end

def on_error(parser_token_id, lexer_token, vstack)
  if lexer_token == "$" || lexer_token == nil
    raise GraphQL::ParseError.new("Unexpected end of document", nil, nil, @query_string, filename: @filename)
  else
    parser_token_name = token_to_str(parser_token_id)
    if parser_token_name.nil?
      raise GraphQL::ParseError.new("Parse Error on unknown token: {token_id: #{parser_token_id}, lexer_token: #{lexer_token}} from #{@query_string}", nil, nil, @query_string, filename: @filename)
    else
      line = lexer_token[1]
      col = lexer_token[2]
      if lexer_token[0] == :BAD_UNICODE_ESCAPE
        raise GraphQL::ParseError.new("Parse error on bad Unicode escape sequence: #{lexer_token[3].inspect} (#{parser_token_name}) at [#{line}, #{col}]", line, col, @query_string, filename: @filename)
      else
        raise GraphQL::ParseError.new("Parse error on #{lexer_token[3].inspect} (#{parser_token_name}) at [#{line}, #{col}]", line, col, @query_string, filename: @filename)
      end
    end
  end
end

def make_node(node_name, assigns)
  assigns.each do |key, value|
    if key != :position_source && value.is_a?(Array) && value[0].is_a?(Symbol)
      assigns[key] = value[3]
    end
  end

  assigns[:filename] = @filename

  GraphQL::Language::Nodes.const_get(node_name).new(assigns)
end
...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    -2,    38,    11,  -102,    12,    13,    14,    11,   182,    12,
    13,    14,   283,  -102,  -102,    73,    19,  -173,   271,   277,
   278,    19,   281,    75,    76,    77,    15,    78,    79,    80,
    81,    15,    89,    35,    91,    73,    28,    35,    35,   100,
  -157,    28,    12,    13,    14,    73,    73,    35,    35,    35,
    35,    73,    35,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    57,    58,    62,
    12,    13,    14,   282,    96,   185,   104,    95,    12,    13,
    14,    43,    44,    45,    46,    47,    48,    49,    50,    51,
    52,    53,    54,    55,    56,    57,    58,    92,    12,    13,
    14,    68,    73,    35,   177,    12,    13,    14,   119,    43,
    44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    58,   229,    12,    13,    14,    68,
   232,    12,    13,    14,   163,   123,  -102,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    12,    13,    14,    73,    68,    12,    13,
    14,    73,   123,    73,    43,    44,    45,    46,    47,    48,
    49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
    73,   134,    96,   225,    68,    12,    13,    14,   141,    73,
   223,   145,   145,   224,    73,    73,   206,    44,    45,    46,
    47,    48,    49,    50,    51,    52,   203,   204,   205,   213,
   214,   222,   210,   211,   212,   225,    73,    12,    13,    14,
    73,   145,   223,   145,    73,   224,   261,    73,   206,    44,
    45,    46,    47,    48,    49,    50,    51,    52,   203,   204,
   205,   213,   214,   222,   210,   211,   212,   225,    73,    12,
    13,    14,   134,   134,   223,    96,   171,   224,   287,   172,
   206,    44,    45,    46,    47,    48,    49,    50,    51,    52,
   203,   204,   205,   213,   214,   222,   210,   211,   212,   303,
    73,    12,    13,    14,    73,   179,    73,    73,    73,   224,
  -157,   191,   206,    44,    45,    46,    47,    48,    49,    50,
    51,    52,   203,   204,   205,   213,   214,   222,   210,   211,
   212,   225,   192,    12,    13,    14,   193,    73,   223,    73,
   196,   224,   197,   198,   206,    44,    45,    46,    47,    48,
    49,    50,    51,    52,   203,   204,   205,   213,   214,   222,
   210,   211,   212,   225,   199,    12,    13,    14,   201,    73,
   223,   227,   134,   224,   134,    73,   206,    44,    45,    46,
    47,    48,    49,    50,    51,    52,   203,   204,   205,   213,
   214,   222,   210,   211,   212,   303,   182,    12,    13,    14,
   239,    73,   182,    35,    35,   224,   182,   182,   206,    44,
    45,    46,    47,    48,    49,    50,    51,    52,   203,   204,
   205,   213,   214,   222,   210,   211,   212,    12,    13,    14,
    82,    83,    35,    84,    85,    86,    87,    88,    98,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,    57,    58,    35,    35,   257,    73,   264,    12,
    13,    14,   134,   239,   274,   274,   284,   286,   292,   199,
    43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
    53,    54,    55,    56,    57,    58,   289,    12,    13,    14,
    73,   299,   304,   307,   308,   310,   286,    73,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,    57,    58,   293,    12,    13,    14,    73,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,   311,    12,    13,    14,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    43,    44,    45,    46,    47,    48,
    49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
    12,    13,    14,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    43,    44,    45,    46,    47,    48,    49,    50,    51,
    52,    53,    54,    55,    56,    57,    58,    12,    13,    14,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,    57,    58,    12,    13,    14,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    43,    44,    45,    46,    47,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    12,    13,    14,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    43,    44,    45,    46,    47,    48,    49,    50,
    51,    52,    53,    54,    55,    56,    57,    58,    12,    13,
    14,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    43,
    44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    58,    12,    13,    14,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    12,    13,    14,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    57,    58,    12,
    13,    14,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
    53,    54,    55,    56,    57,    58,    12,    13,    14,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    12,    13,    14,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    43,    44,    45,    46,    47,    48,
    49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
    12,    13,    14,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    43,    44,    45,    46,    47,    48,    49,    50,    51,
    52,    53,    54,    55,    56,    57,    58,    12,    13,    14,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,    57,    58,    12,    13,    14,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    43,    44,    45,    46,    47,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    12,    13,    14,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    43,    44,    45,    46,    47,    48,    49,    50,
    51,    52,    53,    54,    55,    56,    57,    58,    12,    13,
    14,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    43,
    44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    58,    12,    13,    14,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    12,    13,    14,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    57,    58,    12,
    13,    14,   nil,   nil,   nil,   nil,   nil,   132,   nil,   nil,
    43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
    53,    54,    55,    56,    57,    58,    12,    13,    14,   nil,
   nil,   nil,   nil,   nil,   132,   nil,   nil,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    12,    13,    14,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    43,    44,    45,    46,    47,    48,
    49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
    12,    13,    14,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    43,    44,    45,    46,    47,    48,    49,    50,    51,
    52,    53,    54,    55,    56,    57,    58,    12,    13,    14,
   nil,   169,   nil,   nil,   nil,   nil,   nil,   nil,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,    57,    58,    12,    13,    14,   nil,   nil,   nil,
   nil,   nil,   132,   nil,   nil,    43,    44,    45,    46,    47,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    12,    13,    14,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    43,    44,    45,    46,    47,    48,    49,    50,
    51,    52,    53,    54,    55,    56,    57,    58,    12,    13,
    14,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    43,
    44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    58,    12,    13,    14,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    12,    13,    14,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    57,    58,    12,
    13,    14,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
    53,    54,    55,    56,    57,    58,    12,    13,    14,   nil,
   nil,   nil,   nil,   nil,   132,   nil,   nil,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    12,    13,    14,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    43,    44,    45,    46,    47,    48,
    49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
    12,    13,    14,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    43,    44,    45,    46,    47,    48,    49,    50,    51,
    52,    53,    54,    55,    56,    57,    58,    12,    13,    14,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,    57,    58,    12,    13,    14,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    43,    44,    45,    46,    47,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    12,    13,    14,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    43,    44,    45,    46,    47,    48,    49,    50,
    51,    52,    53,    54,    55,    56,    57,    58,    12,    13,
    14,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    43,
    44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    58,    12,    13,    14,   nil,   nil,
   nil,   nil,   nil,   132,   nil,   nil,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    12,    13,    14,   nil,   nil,   nil,   nil,   nil,
   132,   nil,   nil,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    57,    58,    12,
    13,    14,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
    53,    54,    55,    56,    57,    58,    12,    13,    14,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   206,    44,    45,
    46,    47,    48,    49,    50,    51,    52,   203,   204,   205,
  -163,   nil,   nil,   nil,  -163,   nil,   nil,   nil,   nil,   nil,
  -163,   nil,  -163,  -163,  -163,  -163 ]

racc_action_check = [
     3,     1,     3,   105,     3,     3,     3,     0,   143,     0,
     0,     0,   255,   150,   152,    19,     3,   182,   234,   246,
   247,     0,   253,    28,    28,    28,     3,    28,    28,    28,
    28,     0,    38,     3,    40,   105,     3,   255,     0,    69,
   143,     0,   145,   145,   145,   150,   152,   182,   234,   246,
   247,    71,   253,   145,   145,   145,   145,   145,   145,   145,
   145,   145,   145,   145,   145,   145,   145,   145,   145,    11,
    11,    11,    11,   254,    67,   145,    74,    67,   104,   104,
   104,    11,    11,    11,    11,    11,    11,    11,    11,    11,
    11,    11,    11,    11,    11,    11,    11,    61,    61,    61,
    61,    11,    75,   254,   138,   138,   138,   138,    88,    61,
    61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
    61,    61,    61,    61,    61,   175,   175,   175,   175,    61,
   180,   180,   180,   180,   121,   121,   148,   175,   175,   175,
   175,   175,   175,   175,   175,   175,   175,   175,   175,   175,
   175,   175,   175,   134,   134,   134,   148,   175,   141,   141,
   141,    90,    91,    94,   134,   134,   134,   134,   134,   134,
   134,   134,   134,   134,   134,   134,   134,   134,   134,   134,
    97,    99,   102,   171,   134,   171,   171,   171,   106,   107,
   171,   108,   109,   171,   110,   111,   171,   171,   171,   171,
   171,   171,   171,   171,   171,   171,   171,   171,   171,   171,
   171,   171,   171,   171,   171,   224,   112,   224,   224,   224,
   113,   114,   224,   115,   116,   224,   224,   117,   224,   224,
   224,   224,   224,   224,   224,   224,   224,   224,   224,   224,
   224,   224,   224,   224,   224,   224,   224,   262,   118,   262,
   262,   262,   120,   124,   262,   125,   128,   262,   262,   130,
   262,   262,   262,   262,   262,   262,   262,   262,   262,   262,
   262,   262,   262,   262,   262,   262,   262,   262,   262,   286,
   133,   286,   286,   286,   136,   140,   142,   144,   146,   286,
   147,   149,   286,   286,   286,   286,   286,   286,   286,   286,
   286,   286,   286,   286,   286,   286,   286,   286,   286,   286,
   286,   292,   151,   292,   292,   292,   153,   155,   292,   157,
   158,   292,   159,   160,   292,   292,   292,   292,   292,   292,
   292,   292,   292,   292,   292,   292,   292,   292,   292,   292,
   292,   292,   292,   304,   161,   304,   304,   304,   165,   168,
   304,   173,   174,   304,   176,   183,   304,   304,   304,   304,
   304,   304,   304,   304,   304,   304,   304,   304,   304,   304,
   304,   304,   304,   304,   304,   307,   184,   307,   307,   307,
   186,   189,   190,   192,   193,   307,   194,   195,   307,   307,
   307,   307,   307,   307,   307,   307,   307,   307,   307,   307,
   307,   307,   307,   307,   307,   307,   307,    68,    68,    68,
    37,    37,   197,    37,    37,    37,    37,    37,    68,    68,
    68,    68,    68,    68,    68,    68,    68,    68,    68,    68,
    68,    68,    68,    68,   198,   199,   200,    68,   225,   225,
   225,   225,   202,   237,   242,   252,   256,   258,   267,   270,
   225,   225,   225,   225,   225,   225,   225,   225,   225,   225,
   225,   225,   225,   225,   225,   225,   265,   265,   265,   265,
   275,   280,   291,   295,   296,   300,   309,   313,   265,   265,
   265,   265,   265,   265,   265,   265,   265,   265,   265,   265,
   265,   265,   265,   265,   268,   268,   268,   268,   314,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   268,   268,   268,   268,
   268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
   268,   268,   303,   303,   303,   303,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   303,   303,   303,   303,   303,   303,
   303,   303,   303,   303,   303,   303,   303,   303,   303,   303,
    10,    10,    10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    10,    10,    10,    10,    10,    10,    10,    15,    15,    15,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    15,
    15,    15,    15,    15,    15,    15,    15,    15,    15,    15,
    15,    15,    15,    15,    73,    73,    73,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    73,    73,    73,    73,    73,
    73,    73,    73,    73,    73,    73,    73,    73,    73,    73,
    73,    76,    76,    76,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    76,    76,    76,    76,    76,    76,    76,    76,
    76,    76,    76,    76,    76,    76,    76,    76,    77,    77,
    77,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    77,
    77,    77,    77,    77,    77,    77,    77,    77,    77,    77,
    77,    77,    77,    77,    77,    78,    78,    78,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    78,    78,    78,    78,
    78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
    78,    78,    79,    79,    79,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    79,    79,    79,    79,    79,    79,    79,
    79,    79,    79,    79,    79,    79,    79,    79,    79,    80,
    80,    80,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
    80,    80,    80,    80,    80,    80,    81,    81,    81,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    81,    81,    81,
    81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
    81,    81,    81,    82,    82,    82,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    82,    82,    82,    82,    82,    82,
    82,    82,    82,    82,    82,    82,    82,    82,    82,    82,
    83,    83,    83,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    83,    83,    83,    83,    83,    83,    83,    83,    83,
    83,    83,    83,    83,    83,    83,    83,    84,    84,    84,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    84,    84,
    84,    84,    84,    84,    84,    84,    84,    84,    84,    84,
    84,    84,    84,    84,    85,    85,    85,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    85,    85,    85,    85,    85,
    85,    85,    85,    85,    85,    85,    85,    85,    85,    85,
    85,    86,    86,    86,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    86,    86,    86,    86,    86,    86,    86,    86,
    86,    86,    86,    86,    86,    86,    86,    86,    87,    87,
    87,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    87,
    87,    87,    87,    87,    87,    87,    87,    87,    87,    87,
    87,    87,    87,    87,    87,    95,    95,    95,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    95,    95,    95,    95,
    95,    95,    95,    95,    95,    95,    95,    95,    95,    95,
    95,    95,    96,    96,    96,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    96,    96,    96,    96,    96,    96,    96,
    96,    96,    96,    96,    96,    96,    96,    96,    96,    98,
    98,    98,   nil,   nil,   nil,   nil,   nil,    98,   nil,   nil,
    98,    98,    98,    98,    98,    98,    98,    98,    98,    98,
    98,    98,    98,    98,    98,    98,   100,   100,   100,   nil,
   nil,   nil,   nil,   nil,   100,   nil,   nil,   100,   100,   100,
   100,   100,   100,   100,   100,   100,   100,   100,   100,   100,
   100,   100,   100,   119,   119,   119,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   119,   119,   119,   119,   119,   119,
   119,   119,   119,   119,   119,   119,   119,   119,   119,   119,
   123,   123,   123,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   123,   123,   123,   123,   123,   123,   123,   123,   123,
   123,   123,   123,   123,   123,   123,   123,   126,   126,   126,
   nil,   126,   nil,   nil,   nil,   nil,   nil,   nil,   126,   126,
   126,   126,   126,   126,   126,   126,   126,   126,   126,   126,
   126,   126,   126,   126,   132,   132,   132,   nil,   nil,   nil,
   nil,   nil,   132,   nil,   nil,   132,   132,   132,   132,   132,
   132,   132,   132,   132,   132,   132,   132,   132,   132,   132,
   132,   179,   179,   179,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   179,   179,   179,   179,   179,   179,   179,   179,
   179,   179,   179,   179,   179,   179,   179,   179,   185,   185,
   185,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   185,
   185,   185,   185,   185,   185,   185,   185,   185,   185,   185,
   185,   185,   185,   185,   185,   187,   187,   187,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   187,   187,   187,   187,
   187,   187,   187,   187,   187,   187,   187,   187,   187,   187,
   187,   187,   191,   191,   191,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   191,   191,   191,   191,   191,   191,   191,
   191,   191,   191,   191,   191,   191,   191,   191,   191,   196,
   196,   196,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   196,   196,   196,   196,   196,   196,   196,   196,   196,   196,
   196,   196,   196,   196,   196,   196,   201,   201,   201,   nil,
   nil,   nil,   nil,   nil,   201,   nil,   nil,   201,   201,   201,
   201,   201,   201,   201,   201,   201,   201,   201,   201,   201,
   201,   201,   201,   223,   223,   223,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   223,   223,   223,   223,   223,   223,
   223,   223,   223,   223,   223,   223,   223,   223,   223,   223,
   233,   233,   233,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   233,   233,   233,   233,   233,   233,   233,   233,   233,
   233,   233,   233,   233,   233,   233,   233,   239,   239,   239,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   239,   239,
   239,   239,   239,   239,   239,   239,   239,   239,   239,   239,
   239,   239,   239,   239,   248,   248,   248,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   248,   248,   248,   248,   248,
   248,   248,   248,   248,   248,   248,   248,   248,   248,   248,
   248,   274,   274,   274,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   274,   274,   274,   274,   274,   274,   274,   274,
   274,   274,   274,   274,   274,   274,   274,   274,   284,   284,
   284,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   284,
   284,   284,   284,   284,   284,   284,   284,   284,   284,   284,
   284,   284,   284,   284,   284,   299,   299,   299,   nil,   nil,
   nil,   nil,   nil,   299,   nil,   nil,   299,   299,   299,   299,
   299,   299,   299,   299,   299,   299,   299,   299,   299,   299,
   299,   299,   308,   308,   308,   nil,   nil,   nil,   nil,   nil,
   308,   nil,   nil,   308,   308,   308,   308,   308,   308,   308,
   308,   308,   308,   308,   308,   308,   308,   308,   308,   310,
   310,   310,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   310,   310,   310,   310,   310,   310,   310,   310,   310,   310,
   310,   310,   310,   310,   310,   310,   244,   244,   244,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   244,   244,   244,
   244,   244,   244,   244,   244,   244,   244,   244,   244,   244,
   188,   nil,   nil,   nil,   188,   nil,   nil,   nil,   nil,   nil,
   188,   nil,   188,   188,   188,   188 ]

racc_action_pointer = [
     5,     1,   nil,     0,   nil,   nil,   nil,   nil,   nil,   nil,
   546,    66,   nil,   nil,   nil,   573,   nil,   nil,   nil,   -19,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     7,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   393,    32,   nil,
    27,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    94,   nil,   nil,   nil,   nil,   nil,    67,   403,    24,
   nil,    17,   nil,   600,    74,    68,   627,   654,   681,   708,
   735,   762,   789,   816,   843,   870,   897,   924,    74,   nil,
   127,   153,   nil,   nil,   129,   951,   978,   146,  1005,   179,
  1032,   nil,   175,   nil,    74,     1,   186,   155,   172,   173,
   160,   161,   182,   186,   202,   204,   190,   193,   214,  1059,
   250,   126,   nil,  1086,   251,   248,  1113,   nil,   246,   nil,
   248,   nil,  1140,   246,   149,   nil,   250,   nil,   101,   nil,
   275,   154,   252,     6,   253,    38,   254,   256,   122,   277,
    11,   310,    12,   314,   nil,   283,   nil,   285,   306,   320,
   321,   337,   nil,   nil,   nil,   338,   nil,   nil,   315,   nil,
   nil,   181,   nil,   338,   350,   122,   352,   nil,   nil,  1167,
   127,   nil,    14,   321,   374,  1194,   343,  1221,  1585,   347,
   380,  1248,   350,   351,   384,   385,  1275,   379,   401,   402,
   409,  1302,   440,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,  1329,   213,   435,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,  1356,    15,   nil,   nil,   406,   nil,  1383,
   nil,   nil,   406,   nil,  1572,   nil,    16,    17,  1410,   nil,
   nil,   nil,   407,    19,    70,     4,   431,   nil,   433,   nil,
   nil,   nil,   245,   nil,   nil,   463,   nil,   438,   491,   nil,
   442,   nil,   nil,   nil,  1437,   436,   nil,   nil,   nil,   nil,
   461,   nil,   nil,   nil,  1464,   nil,   277,   nil,   nil,   nil,
   nil,   462,   309,   nil,   nil,   463,   464,   nil,   nil,  1491,
   437,   nil,   nil,   519,   341,   nil,   nil,   373,  1518,   462,
  1545,   nil,   nil,   443,   464,   nil,   nil,   nil ]

racc_action_default = [
  -152,  -187,    -1,  -152,    -3,    -5,    -6,    -7,    -8,    -9,
   -16,  -187,   -13,   -14,   -15,  -110,  -112,  -113,  -114,  -101,
  -121,  -122,  -123,  -124,  -125,  -126,  -127,  -128,  -187,  -131,
  -132,  -133,  -134,  -135,  -136,  -151,  -153,  -187,  -187,    -4,
   -18,   -17,   -39,   -40,   -41,   -42,   -43,   -44,   -45,   -46,
   -47,   -48,   -49,   -50,   -51,   -52,   -53,   -54,   -55,   -56,
   -57,  -187,   -12,   -32,   -34,   -35,   -36,   -67,  -101,  -187,
  -111,  -102,  -103,  -187,  -116,  -101,  -187,  -187,  -187,  -187,
  -187,  -187,  -187,  -187,  -187,  -187,  -187,  -187,  -187,   318,
  -101,  -187,   -11,   -33,  -101,  -187,  -187,  -101,  -187,  -187,
  -187,  -104,   -67,  -115,  -187,  -130,  -187,  -187,  -156,  -156,
  -101,  -101,  -101,  -101,  -156,  -156,  -101,  -101,  -101,  -187,
  -187,  -187,   -20,  -187,   -30,   -67,  -187,   -69,  -187,  -106,
   -23,   -25,  -187,  -101,  -187,  -108,  -101,  -105,  -187,  -118,
  -187,  -187,  -137,  -141,  -101,  -187,  -101,  -144,  -146,  -187,
  -148,  -187,  -150,  -187,  -154,  -101,  -157,  -101,  -187,  -187,
  -187,  -168,   -10,   -19,   -21,  -187,   -31,   -37,  -101,   -68,
   -70,  -187,   -24,  -187,  -187,  -187,  -187,  -117,  -119,  -187,
  -187,  -138,  -152,  -102,  -171,  -187,  -159,  -160,  -161,  -102,
  -171,  -187,  -152,  -152,  -171,  -171,  -187,  -152,  -152,  -152,
  -183,  -187,   -30,   -58,   -59,   -60,   -61,   -62,   -63,   -71,
   -72,   -73,   -74,   -75,   -76,   -77,   -78,   -79,   -80,   -81,
   -82,   -83,   -84,  -187,  -187,  -187,  -100,   -26,  -107,   -29,
  -109,  -120,  -129,  -187,  -152,  -174,  -139,  -158,  -161,  -187,
  -164,  -142,  -145,  -177,  -187,   -65,  -152,  -152,  -187,  -166,
  -155,  -176,  -179,  -152,  -152,  -152,  -187,  -184,   -27,   -38,
   -85,   -86,  -187,   -88,   -90,  -187,   -92,  -187,  -187,   -97,
  -168,  -172,  -175,  -162,  -187,  -101,   -66,  -147,  -149,  -167,
  -187,  -180,  -181,  -169,  -187,   -22,  -187,   -87,   -89,   -91,
   -93,  -187,  -187,   -96,   -98,  -187,  -187,  -178,   -64,  -187,
  -182,  -185,   -28,  -187,  -187,   -81,   -94,  -187,  -187,   -27,
  -187,   -95,   -99,  -101,  -101,  -186,  -170,  -165 ]

racc_goto_table = [
    10,   105,    61,    10,    37,    93,   181,    37,    41,    67,
   133,   209,   136,   200,   208,    70,   266,    74,   167,   178,
   186,   122,   135,   247,   302,   138,   246,   242,   254,   255,
   305,   253,   252,   142,   279,   127,   148,   150,   152,   235,
     1,   279,   279,   162,   173,   312,     2,   236,   276,   285,
     3,   164,    40,   241,    94,   276,   290,   250,   251,    67,
   237,   178,   180,    90,   263,   170,    99,   208,    97,   121,
   183,   102,   189,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   101,   208,   120,   137,
   275,   272,   124,   125,   128,   129,   259,   228,     4,   230,
   314,    39,   288,   126,   140,   208,   143,   147,   149,   151,
   153,   154,   168,   258,   158,   159,   160,   161,   262,    93,
   101,   165,   296,   265,   128,   175,   294,    69,   103,   208,
   187,   174,    67,   234,   176,   208,   256,   300,   140,   144,
   146,   140,   184,   188,   190,   155,   157,   208,   nil,   nil,
   208,   nil,   nil,   194,   nil,   195,   nil,   101,   nil,   nil,
   nil,   nil,   nil,   101,   nil,   101,   202,   101,   nil,   nil,
   nil,   207,   nil,    67,   nil,   nil,   nil,   231,   nil,   nil,
   140,   nil,   nil,   238,   nil,   240,   233,   nil,   nil,   243,
   nil,   nil,   nil,   nil,   243,   nil,   244,   nil,   101,   nil,
   nil,   244,   nil,   nil,   101,   nil,   nil,   nil,   nil,   nil,
   nil,   309,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   313,   260,   nil,   267,   207,   nil,   nil,   nil,   nil,   nil,
   nil,   270,   nil,   nil,   nil,   nil,   nil,   273,   233,   nil,
   nil,   nil,   nil,   nil,   207,   nil,   280,   nil,   nil,   nil,
   244,   nil,   nil,   nil,   nil,   nil,   nil,   244,   nil,   nil,
   nil,   nil,   207,   291,   nil,   nil,   295,   nil,   nil,   nil,
   nil,   nil,   297,   298,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   301,   nil,   nil,   nil,   207,   nil,   nil,   nil,
   nil,   nil,   207,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   295,   nil,   nil,   207,   nil,   nil,   207,   315,   nil,
   nil,   316,   317 ]

racc_goto_check = [
    10,    49,    15,    10,    33,    24,    73,    33,    16,    16,
    19,    37,    19,    81,    30,    29,    46,    13,    23,    57,
    78,    18,    14,    76,    22,    56,    34,    75,    76,    76,
    22,    34,    75,    49,    80,    36,    49,    49,    49,    82,
     1,    80,    80,    14,    19,    22,     2,    73,    32,    20,
     3,    18,    11,    73,    28,    32,    46,    73,    73,    16,
    78,    57,    56,    12,    37,    36,    13,    30,    29,    17,
    49,    16,    49,    13,    16,    16,    16,    16,    16,    16,
    16,    16,    16,    16,    16,    16,    50,    30,    13,    28,
    31,    82,    13,    16,    16,    13,    23,    14,     4,    14,
    20,     4,    37,    35,    10,    30,    72,    72,    13,    13,
    13,    13,    28,    19,    13,    13,    13,    16,    44,    24,
    50,    16,    81,    45,    16,    15,    48,    51,    55,    30,
    79,    13,    16,    83,    13,    30,    84,    85,    10,    74,
    74,    10,    13,    16,    13,    74,    74,    30,   nil,   nil,
    30,   nil,   nil,    13,   nil,    13,   nil,    50,   nil,   nil,
   nil,   nil,   nil,    50,   nil,    50,    13,    50,   nil,   nil,
   nil,    10,   nil,    16,   nil,   nil,   nil,    16,   nil,   nil,
    10,   nil,   nil,    16,   nil,    16,    33,   nil,   nil,    16,
   nil,   nil,   nil,   nil,    16,   nil,    33,   nil,    50,   nil,
   nil,    33,   nil,   nil,    50,   nil,   nil,   nil,   nil,   nil,
   nil,    19,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    19,    16,   nil,    16,    10,   nil,   nil,   nil,   nil,   nil,
   nil,    16,   nil,   nil,   nil,   nil,   nil,    16,    33,   nil,
   nil,   nil,   nil,   nil,    10,   nil,    16,   nil,   nil,   nil,
    33,   nil,   nil,   nil,   nil,   nil,   nil,    33,   nil,   nil,
   nil,   nil,    10,    16,   nil,   nil,    16,   nil,   nil,   nil,
   nil,   nil,    16,    13,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    16,   nil,   nil,   nil,    10,   nil,   nil,   nil,
   nil,   nil,    10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    16,   nil,   nil,    10,   nil,   nil,    10,    16,   nil,
   nil,    13,    13 ]

racc_goto_pointer = [
   nil,    40,    46,    50,    98,   nil,   nil,   nil,   nil,   nil,
     0,    42,    23,    -2,   -77,    -9,    -2,   -22,   -70,   -88,
  -209,   nil,  -262,  -106,   -56,   nil,   nil,   nil,   -13,     0,
  -157,  -154,  -198,     4,  -166,     7,   -61,  -160,   nil,   nil,
   nil,   nil,   nil,   nil,  -106,  -102,  -209,   nil,  -142,   -74,
    15,   112,   nil,   nil,   nil,    54,   -79,  -119,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    -2,  -137,    31,  -164,  -170,   nil,  -125,   -15,
  -213,  -148,  -143,   -49,   -64,  -147 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,     5,     6,     7,     8,     9,
    59,   nil,   nil,   nil,   166,   nil,   131,   nil,   nil,   nil,
   nil,   130,   219,   nil,    63,    64,    65,    66,   nil,    42,
    60,   226,   245,   248,   nil,   nil,   nil,   306,   215,   216,
   217,   218,   220,   221,   nil,   nil,   nil,   268,   269,    71,
    72,   nil,    16,    17,    18,   nil,   nil,   139,    20,    21,
    22,    23,    24,    25,    26,    27,    29,    30,    31,    32,
    33,    34,   156,   nil,   nil,   nil,   nil,    36,   nil,   nil,
   249,   nil,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 40, :_reduce_none,
  1, 41, :_reduce_2,
  1, 42, :_reduce_3,
  2, 42, :_reduce_4,
  1, 43, :_reduce_none,
  1, 43, :_reduce_none,
  1, 43, :_reduce_none,
  1, 44, :_reduce_none,
  1, 44, :_reduce_none,
  5, 47, :_reduce_10,
  3, 47, :_reduce_11,
  2, 47, :_reduce_12,
  1, 49, :_reduce_none,
  1, 49, :_reduce_none,
  1, 49, :_reduce_none,
  0, 50, :_reduce_16,
  1, 50, :_reduce_none,
  0, 51, :_reduce_18,
  3, 51, :_reduce_19,
  1, 56, :_reduce_20,
  2, 56, :_reduce_21,
  5, 57, :_reduce_22,
  1, 58, :_reduce_23,
  2, 58, :_reduce_24,
  1, 60, :_reduce_25,
  3, 60, :_reduce_26,
  0, 59, :_reduce_27,
  2, 59, :_reduce_28,
  3, 53, :_reduce_29,
  0, 62, :_reduce_30,
  1, 62, :_reduce_31,
  1, 54, :_reduce_32,
  2, 54, :_reduce_33,
  1, 63, :_reduce_none,
  1, 63, :_reduce_none,
  1, 63, :_reduce_none,
  4, 64, :_reduce_37,
  6, 64, :_reduce_38,
  1, 55, :_reduce_none,
  1, 55, :_reduce_none,
  1, 69, :_reduce_none,
  1, 69, :_reduce_none,
  1, 69, :_reduce_none,
  1, 69, :_reduce_none,
  1, 69, :_reduce_none,
  1, 69, :_reduce_none,
  1, 69, :_reduce_none,
  1, 69, :_reduce_none,
  1, 69, :_reduce_none,
  1, 68, :_reduce_none,
  1, 68, :_reduce_none,
  1, 68, :_reduce_none,
  1, 68, :_reduce_none,
  1, 68, :_reduce_none,
  1, 68, :_reduce_none,
  1, 68, :_reduce_none,
  1, 68, :_reduce_none,
  1, 70, :_reduce_none,
  1, 70, :_reduce_none,
  1, 70, :_reduce_none,
  1, 70, :_reduce_none,
  1, 70, :_reduce_none,
  1, 70, :_reduce_none,
  3, 71, :_reduce_64,
  1, 73, :_reduce_65,
  2, 73, :_reduce_66,
  0, 67, :_reduce_67,
  3, 67, :_reduce_68,
  1, 74, :_reduce_69,
  2, 74, :_reduce_70,
  3, 75, :_reduce_71,
  1, 61, :_reduce_72,
  1, 61, :_reduce_73,
  1, 61, :_reduce_74,
  1, 61, :_reduce_75,
  1, 61, :_reduce_76,
  1, 61, :_reduce_none,
  1, 61, :_reduce_none,
  1, 61, :_reduce_none,
  1, 61, :_reduce_none,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  1, 76, :_reduce_none,
  1, 77, :_reduce_84,
  2, 81, :_reduce_85,
  2, 79, :_reduce_86,
  3, 79, :_reduce_87,
  1, 83, :_reduce_88,
  2, 83, :_reduce_89,
  2, 82, :_reduce_90,
  3, 82, :_reduce_91,
  1, 84, :_reduce_92,
  2, 84, :_reduce_93,
  3, 85, :_reduce_94,
  2, 80, :_reduce_95,
  3, 80, :_reduce_96,
  1, 86, :_reduce_97,
  2, 86, :_reduce_98,
  3, 87, :_reduce_99,
  1, 78, :_reduce_100,
  0, 52, :_reduce_101,
  1, 52, :_reduce_none,
  1, 88, :_reduce_103,
  2, 88, :_reduce_104,
  3, 89, :_reduce_105,
  3, 65, :_reduce_106,
  5, 66, :_reduce_107,
  3, 66, :_reduce_108,
  6, 48, :_reduce_109,
  0, 90, :_reduce_110,
  1, 90, :_reduce_none,
  1, 45, :_reduce_none,
  1, 45, :_reduce_none,
  1, 45, :_reduce_none,
  3, 91, :_reduce_115,
  0, 94, :_reduce_116,
  3, 94, :_reduce_117,
  1, 95, :_reduce_none,
  2, 95, :_reduce_119,
  3, 96, :_reduce_120,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 46, :_reduce_none,
  1, 46, :_reduce_none,
  6, 103, :_reduce_129,
  3, 103, :_reduce_130,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  4, 105, :_reduce_137,
  5, 106, :_reduce_138,
  6, 106, :_reduce_139,
  5, 106, :_reduce_140,
  4, 106, :_reduce_141,
  6, 107, :_reduce_142,
  5, 107, :_reduce_143,
  4, 107, :_reduce_144,
  6, 108, :_reduce_145,
  4, 108, :_reduce_146,
  7, 109, :_reduce_147,
  4, 109, :_reduce_148,
  7, 110, :_reduce_149,
  4, 110, :_reduce_150,
  1, 116, :_reduce_none,
  0, 72, :_reduce_none,
  1, 72, :_reduce_none,
  4, 97, :_reduce_154,
  6, 98, :_reduce_155,
  0, 113, :_reduce_156,
  1, 113, :_reduce_none,
  3, 111, :_reduce_158,
  2, 111, :_reduce_159,
  2, 111, :_reduce_160,
  1, 117, :_reduce_161,
  3, 117, :_reduce_162,
  1, 118, :_reduce_163,
  2, 118, :_reduce_164,
  6, 119, :_reduce_165,
  1, 115, :_reduce_166,
  2, 115, :_reduce_167,
  0, 120, :_reduce_168,
  3, 120, :_reduce_169,
  6, 121, :_reduce_170,
  0, 112, :_reduce_171,
  3, 112, :_reduce_172,
  0, 122, :_reduce_173,
  1, 122, :_reduce_174,
  2, 122, :_reduce_175,
  6, 99, :_reduce_176,
  1, 114, :_reduce_177,
  3, 114, :_reduce_178,
  6, 100, :_reduce_179,
  7, 101, :_reduce_180,
  7, 102, :_reduce_181,
  8, 93, :_reduce_182,
  0, 123, :_reduce_none,
  1, 123, :_reduce_none,
  1, 124, :_reduce_185,
  3, 124, :_reduce_186 ]

racc_reduce_n = 187

racc_shift_n = 318

racc_token_table = {
  false => 0,
  :error => 1,
  :LCURLY => 2,
  :RCURLY => 3,
  :QUERY => 4,
  :MUTATION => 5,
  :SUBSCRIPTION => 6,
  :LPAREN => 7,
  :RPAREN => 8,
  :VAR_SIGN => 9,
  :COLON => 10,
  :BANG => 11,
  :LBRACKET => 12,
  :RBRACKET => 13,
  :EQUALS => 14,
  :ON => 15,
  :SCHEMA => 16,
  :SCALAR => 17,
  :TYPE => 18,
  :IMPLEMENTS => 19,
  :INTERFACE => 20,
  :UNION => 21,
  :ENUM => 22,
  :INPUT => 23,
  :DIRECTIVE => 24,
  :IDENTIFIER => 25,
  :FRAGMENT => 26,
  :REPEATABLE => 27,
  :TRUE => 28,
  :FALSE => 29,
  :NULL => 30,
  :FLOAT => 31,
  :INT => 32,
  :STRING => 33,
  :DIR_SIGN => 34,
  :ELLIPSIS => 35,
  :EXTEND => 36,
  :AMP => 37,
  :PIPE => 38 }

racc_nt_base = 39

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "LCURLY",
  "RCURLY",
  "QUERY",
  "MUTATION",
  "SUBSCRIPTION",
  "LPAREN",
  "RPAREN",
  "VAR_SIGN",
  "COLON",
  "BANG",
  "LBRACKET",
  "RBRACKET",
  "EQUALS",
  "ON",
  "SCHEMA",
  "SCALAR",
  "TYPE",
  "IMPLEMENTS",
  "INTERFACE",
  "UNION",
  "ENUM",
  "INPUT",
  "DIRECTIVE",
  "IDENTIFIER",
  "FRAGMENT",
  "REPEATABLE",
  "TRUE",
  "FALSE",
  "NULL",
  "FLOAT",
  "INT",
  "STRING",
  "DIR_SIGN",
  "ELLIPSIS",
  "EXTEND",
  "AMP",
  "PIPE",
  "$start",
  "target",
  "document",
  "definitions_list",
  "definition",
  "executable_definition",
  "type_system_definition",
  "type_system_extension",
  "operation_definition",
  "fragment_definition",
  "operation_type",
  "operation_name_opt",
  "variable_definitions_opt",
  "directives_list_opt",
  "selection_set",
  "selection_list",
  "name",
  "variable_definitions_list",
  "variable_definition",
  "type",
  "default_value_opt",
  "nullable_type",
  "literal_value",
  "selection_set_opt",
  "selection",
  "field",
  "fragment_spread",
  "inline_fragment",
  "arguments_opt",
  "name_without_on",
  "schema_keyword",
  "enum_name",
  "enum_value_definition",
  "description_opt",
  "enum_value_definitions",
  "arguments_list",
  "argument",
  "input_value",
  "null_value",
  "enum_value",
  "list_value",
  "object_literal_value",
  "variable",
  "object_value",
  "list_value_list",
  "object_value_list",
  "object_value_field",
  "object_literal_value_list",
  "object_literal_value_field",
  "directives_list",
  "directive",
  "fragment_name_opt",
  "schema_definition",
  "type_definition",
  "directive_definition",
  "operation_type_definition_list_opt",
  "operation_type_definition_list",
  "operation_type_definition",
  "scalar_type_definition",
  "object_type_definition",
  "interface_type_definition",
  "union_type_definition",
  "enum_type_definition",
  "input_object_type_definition",
  "schema_extension",
  "type_extension",
  "scalar_type_extension",
  "object_type_extension",
  "interface_type_extension",
  "union_type_extension",
  "enum_type_extension",
  "input_object_type_extension",
  "implements",
  "field_definition_list_opt",
  "implements_opt",
  "union_members",
  "input_value_definition_list",
  "description",
  "interfaces_list",
  "legacy_interfaces_list",
  "input_value_definition",
  "arguments_definitions_opt",
  "field_definition",
  "field_definition_list",
  "directive_repeatable_opt",
  "directive_locations" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'parser.y', 4)
  def _reduce_2(val, _values, result)
     result = make_node(:Document, definitions: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 7)
  def _reduce_3(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 8)
  def _reduce_4(val, _values, result)
     val[0] << val[1]
    result
  end
.,.,

# reduce 5 omitted

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

module_eval(<<'.,.,', 'parser.y', 21)
  def _reduce_10(val, _values, result)
            result = make_node(
          :OperationDefinition, {
            operation_type: val[0],
            name:           val[1],
            variables:      val[2],
            directives:     val[3],
            selections:     val[4],
            position_source: val[0],
          }
        )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 33)
  def _reduce_11(val, _values, result)
            result = make_node(
          :OperationDefinition, {
            operation_type: "query",
            selections: val[1],
            position_source: val[0],
          }
        )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 42)
  def _reduce_12(val, _values, result)
            result = make_node(
          :OperationDefinition, {
            operation_type: "query",
            selections: [],
            position_source: val[0],
          }
        )

    result
  end
.,.,

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

module_eval(<<'.,.,', 'parser.y', 57)
  def _reduce_16(val, _values, result)
     result = nil
    result
  end
.,.,

# reduce 17 omitted

module_eval(<<'.,.,', 'parser.y', 61)
  def _reduce_18(val, _values, result)
     result = EMPTY_ARRAY
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 62)
  def _reduce_19(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 65)
  def _reduce_20(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 66)
  def _reduce_21(val, _values, result)
     val[0] << val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 70)
  def _reduce_22(val, _values, result)
            result = make_node(:VariableDefinition, {
          name: val[1],
          type: val[3],
          default_value: val[4],
          position_source: val[0],
        })

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 79)
  def _reduce_23(val, _values, result)
     result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 80)
  def _reduce_24(val, _values, result)
     result = make_node(:NonNullType, of_type: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 83)
  def _reduce_25(val, _values, result)
     result = make_node(:TypeName, name: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 84)
  def _reduce_26(val, _values, result)
     result = make_node(:ListType, of_type: val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 87)
  def _reduce_27(val, _values, result)
     result = nil
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 88)
  def _reduce_28(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 91)
  def _reduce_29(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 94)
  def _reduce_30(val, _values, result)
     result = EMPTY_ARRAY
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 95)
  def _reduce_31(val, _values, result)
     result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 98)
  def _reduce_32(val, _values, result)
     result = [result]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 99)
  def _reduce_33(val, _values, result)
     val[0] << val[1]
    result
  end
.,.,

# reduce 34 omitted

# reduce 35 omitted

# reduce 36 omitted

module_eval(<<'.,.,', 'parser.y', 108)
  def _reduce_37(val, _values, result)
                result = make_node(
              :Field, {
                name:         val[0],
                arguments:    val[1],
                directives:   val[2],
                selections:   val[3],
                position_source: val[0],
              }
            )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 119)
  def _reduce_38(val, _values, result)
                result = make_node(
              :Field, {
                alias:        val[0],
                name:         val[2],
                arguments:    val[3],
                directives:   val[4],
                selections:   val[5],
                position_source: val[0],
              }
            )

    result
  end
.,.,

# reduce 39 omitted

# reduce 40 omitted

# reduce 41 omitted

# reduce 42 omitted

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

# reduce 56 omitted

# reduce 57 omitted

# reduce 58 omitted

# reduce 59 omitted

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

module_eval(<<'.,.,', 'parser.y', 165)
  def _reduce_64(val, _values, result)
     result = make_node(:EnumValueDefinition, name: val[1], directives: val[2], description: val[0] || get_description(val[1]), definition_line: val[1][1], position_source: val[0] || val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 168)
  def _reduce_65(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 169)
  def _reduce_66(val, _values, result)
     result = val[0] << val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 172)
  def _reduce_67(val, _values, result)
     result = EMPTY_ARRAY
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 173)
  def _reduce_68(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 176)
  def _reduce_69(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 177)
  def _reduce_70(val, _values, result)
     val[0] << val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 180)
  def _reduce_71(val, _values, result)
     result = make_node(:Argument, name: val[0], value: val[2], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 183)
  def _reduce_72(val, _values, result)
     result = val[0][3].to_f
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 184)
  def _reduce_73(val, _values, result)
     result = val[0][3].to_i
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 185)
  def _reduce_74(val, _values, result)
     result = val[0][3]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 186)
  def _reduce_75(val, _values, result)
     result = true
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 187)
  def _reduce_76(val, _values, result)
     result = false
    result
  end
.,.,

# reduce 77 omitted

# reduce 78 omitted

# reduce 79 omitted

# reduce 80 omitted

# reduce 81 omitted

# reduce 82 omitted

# reduce 83 omitted

module_eval(<<'.,.,', 'parser.y', 198)
  def _reduce_84(val, _values, result)
     result = make_node(:NullValue, name: val[0], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 199)
  def _reduce_85(val, _values, result)
     result = make_node(:VariableIdentifier, name: val[1], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 202)
  def _reduce_86(val, _values, result)
     result = EMPTY_ARRAY
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 203)
  def _reduce_87(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 206)
  def _reduce_88(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 207)
  def _reduce_89(val, _values, result)
     val[0] << val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 210)
  def _reduce_90(val, _values, result)
     result = make_node(:InputObject, arguments: [], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 211)
  def _reduce_91(val, _values, result)
     result = make_node(:InputObject, arguments: val[1], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 214)
  def _reduce_92(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 215)
  def _reduce_93(val, _values, result)
     val[0] << val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 218)
  def _reduce_94(val, _values, result)
     result = make_node(:Argument, name: val[0], value: val[2], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 222)
  def _reduce_95(val, _values, result)
     result = make_node(:InputObject, arguments: [], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 223)
  def _reduce_96(val, _values, result)
     result = make_node(:InputObject, arguments: val[1], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 226)
  def _reduce_97(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 227)
  def _reduce_98(val, _values, result)
     val[0] << val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 230)
  def _reduce_99(val, _values, result)
     result = make_node(:Argument, name: val[0], value: val[2], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 232)
  def _reduce_100(val, _values, result)
     result = make_node(:Enum, name: val[0], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 235)
  def _reduce_101(val, _values, result)
     result = EMPTY_ARRAY
    result
  end
.,.,

# reduce 102 omitted

module_eval(<<'.,.,', 'parser.y', 239)
  def _reduce_103(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 240)
  def _reduce_104(val, _values, result)
     val[0] << val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 242)
  def _reduce_105(val, _values, result)
     result = make_node(:Directive, name: val[1], arguments: val[2], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 245)
  def _reduce_106(val, _values, result)
     result = make_node(:FragmentSpread, name: val[1], directives: val[2], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 249)
  def _reduce_107(val, _values, result)
            result = make_node(:InlineFragment, {
          type: val[2],
          directives: val[3],
          selections: val[4],
          position_source: val[0]
        })

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 257)
  def _reduce_108(val, _values, result)
            result = make_node(:InlineFragment, {
          type: nil,
          directives: val[1],
          selections: val[2],
          position_source: val[0]
        })

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 267)
  def _reduce_109(val, _values, result)
          result = make_node(:FragmentDefinition, {
          name:       val[1],
          type:       val[3],
          directives: val[4],
          selections: val[5],
          position_source: val[0],
        }
      )

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 278)
  def _reduce_110(val, _values, result)
     result = nil
    result
  end
.,.,

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

module_eval(<<'.,.,', 'parser.y', 287)
  def _reduce_115(val, _values, result)
     result = make_node(:SchemaDefinition, position_source: val[0], definition_line: val[0][1], directives: val[1], **val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 290)
  def _reduce_116(val, _values, result)
     result = {}
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 291)
  def _reduce_117(val, _values, result)
     result = val[1]
    result
  end
.,.,

# reduce 118 omitted

module_eval(<<'.,.,', 'parser.y', 295)
  def _reduce_119(val, _values, result)
     result = val[0].merge(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 298)
  def _reduce_120(val, _values, result)
     result = { val[0][3].to_sym => val[2] }
    result
  end
.,.,

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

module_eval(<<'.,.,', 'parser.y', 313)
  def _reduce_129(val, _values, result)
     result = make_node(:SchemaExtension, position_source: val[0], directives: val[2], **val[4])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 314)
  def _reduce_130(val, _values, result)
     result = make_node(:SchemaExtension, position_source: val[0], directives: val[2])
    result
  end
.,.,

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

module_eval(<<'.,.,', 'parser.y', 324)
  def _reduce_137(val, _values, result)
     result = make_node(:ScalarTypeExtension, name: val[2], directives: val[3], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 328)
  def _reduce_138(val, _values, result)
     result = make_node(:ObjectTypeExtension, name: val[2], interfaces: val[3], directives: [], fields: val[4], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 329)
  def _reduce_139(val, _values, result)
     result = make_node(:ObjectTypeExtension, name: val[2], interfaces: val[3], directives: val[4], fields: val[5], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 330)
  def _reduce_140(val, _values, result)
     result = make_node(:ObjectTypeExtension, name: val[2], interfaces: val[3], directives: val[4], fields: [], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 331)
  def _reduce_141(val, _values, result)
     result = make_node(:ObjectTypeExtension, name: val[2], interfaces: val[3], directives: [], fields: [], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 334)
  def _reduce_142(val, _values, result)
     result = make_node(:InterfaceTypeExtension, name: val[2], interfaces: val[3], directives: val[4], fields: val[5], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 335)
  def _reduce_143(val, _values, result)
     result = make_node(:InterfaceTypeExtension, name: val[2], interfaces: val[3], directives: val[4], fields: [], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 336)
  def _reduce_144(val, _values, result)
     result = make_node(:InterfaceTypeExtension, name: val[2], interfaces: val[3], directives: [], fields: [], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 339)
  def _reduce_145(val, _values, result)
     result = make_node(:UnionTypeExtension, name: val[2], directives: val[3], types: val[5], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 340)
  def _reduce_146(val, _values, result)
     result = make_node(:UnionTypeExtension, name: val[2], directives: val[3], types: [], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 343)
  def _reduce_147(val, _values, result)
     result = make_node(:EnumTypeExtension, name: val[2], directives: val[3], values: val[5], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 344)
  def _reduce_148(val, _values, result)
     result = make_node(:EnumTypeExtension, name: val[2], directives: val[3], values: [], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 347)
  def _reduce_149(val, _values, result)
     result = make_node(:InputObjectTypeExtension, name: val[2], directives: val[3], fields: val[5], position_source: val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 348)
  def _reduce_150(val, _values, result)
     result = make_node(:InputObjectTypeExtension, name: val[2], directives: val[3], fields: [], position_source: val[0])
    result
  end
.,.,

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

module_eval(<<'.,.,', 'parser.y', 358)
  def _reduce_154(val, _values, result)
            result = make_node(:ScalarTypeDefinition, name: val[2], directives: val[3], description: val[0] || get_description(val[1]), definition_line: val[1][1], position_source: val[0] || val[1])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 363)
  def _reduce_155(val, _values, result)
            result = make_node(:ObjectTypeDefinition, name: val[2], interfaces: val[3], directives: val[4], fields: val[5], description: val[0] || get_description(val[1]), definition_line: val[1][1], position_source: val[0] || val[1])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 367)
  def _reduce_156(val, _values, result)
     result = EMPTY_ARRAY
    result
  end
.,.,

# reduce 157 omitted

module_eval(<<'.,.,', 'parser.y', 371)
  def _reduce_158(val, _values, result)
     result = val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 372)
  def _reduce_159(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 373)
  def _reduce_160(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 376)
  def _reduce_161(val, _values, result)
     result = [make_node(:TypeName, name: val[0], position_source: val[0])]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 377)
  def _reduce_162(val, _values, result)
     val[0] << make_node(:TypeName, name: val[2], position_source: val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 380)
  def _reduce_163(val, _values, result)
     result = [make_node(:TypeName, name: val[0], position_source: val[0])]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 381)
  def _reduce_164(val, _values, result)
     val[0] << make_node(:TypeName, name: val[1], position_source: val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 385)
  def _reduce_165(val, _values, result)
            result = make_node(:InputValueDefinition, name: val[1], type: val[3], default_value: val[4], directives: val[5], description: val[0] || get_description(val[1]), definition_line: val[1][1], position_source: val[0] || val[1])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 389)
  def _reduce_166(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 390)
  def _reduce_167(val, _values, result)
     val[0] << val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 393)
  def _reduce_168(val, _values, result)
     result = EMPTY_ARRAY
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 394)
  def _reduce_169(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 398)
  def _reduce_170(val, _values, result)
            result = make_node(:FieldDefinition, name: val[1], arguments: val[2], type: val[4], directives: val[5], description: val[0] || get_description(val[1]), definition_line: val[1][1], position_source: val[0] || val[1])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 402)
  def _reduce_171(val, _values, result)
     result = EMPTY_ARRAY
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 403)
  def _reduce_172(val, _values, result)
     result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 406)
  def _reduce_173(val, _values, result)
     result = EMPTY_ARRAY
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 407)
  def _reduce_174(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 408)
  def _reduce_175(val, _values, result)
     val[0] << val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 412)
  def _reduce_176(val, _values, result)
            result = make_node(:InterfaceTypeDefinition, name: val[2], interfaces: val[3], directives: val[4], fields: val[5], description: val[0] || get_description(val[1]), definition_line: val[1][1], position_source: val[0] || val[1])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 416)
  def _reduce_177(val, _values, result)
     result = [make_node(:TypeName, name: val[0], position_source: val[0])]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 417)
  def _reduce_178(val, _values, result)
     val[0] << make_node(:TypeName, name: val[2], position_source: val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 421)
  def _reduce_179(val, _values, result)
            result = make_node(:UnionTypeDefinition, name: val[2], directives: val[3], types: val[5], description: val[0] || get_description(val[1]), definition_line: val[1][1], position_source: val[0] || val[1])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 426)
  def _reduce_180(val, _values, result)
             result = make_node(:EnumTypeDefinition, name: val[2], directives: val[3], values: val[5], description: val[0] || get_description(val[1]), definition_line: val[1][1], position_source: val[0] || val[1])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 431)
  def _reduce_181(val, _values, result)
            result = make_node(:InputObjectTypeDefinition, name: val[2], directives: val[3], fields: val[5], description: val[0] || get_description(val[1]), definition_line: val[1][1], position_source: val[0] || val[1])

    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 436)
  def _reduce_182(val, _values, result)
            result = make_node(:DirectiveDefinition, name: val[3], arguments: val[4], locations: val[7], repeatable: !!val[5], description: val[0] || get_description(val[1]), definition_line: val[1][1], position_source: val[0] || val[1])

    result
  end
.,.,

# reduce 183 omitted

# reduce 184 omitted

module_eval(<<'.,.,', 'parser.y', 444)
  def _reduce_185(val, _values, result)
     result = [make_node(:DirectiveLocation, name: val[0][3], position_source: val[0])]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 445)
  def _reduce_186(val, _values, result)
     val[0] << make_node(:DirectiveLocation, name: val[2][3], position_source: val[2])
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class Parser
  end   # module Language
end   # module GraphQL
